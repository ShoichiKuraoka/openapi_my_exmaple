//
// KariAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire
import RxSwift



open class KariAPI {
    /**
     Get Kari Information.
     
     - parameter identifier: (path) Identifier of Kari to return 
     - returns: Observable<Kari>
     */
    open class func getKari(identifier: String) -> Observable<Kari> {
        return Observable.create { observer -> Disposable in
            getKariWithRequestBuilder(identifier: identifier).execute { (response, error) -> Void in
                if let error = error {
                    observer.onError(error)
                } else if let response = response {
                    observer.onNext(response.body!)
                } else {
                    fatalError()
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Get Kari Information.
     - GET /kari/kari/{identifier}
     - parameter identifier: (path) Identifier of Kari to return 
     - returns: RequestBuilder<Kari> 
     */
    open class func getKariWithRequestBuilder(identifier: String) -> RequestBuilder<Kari> {
        var path = "/kari/kari/{identifier}"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let URLString = KariAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Kari>.Type = KariAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
